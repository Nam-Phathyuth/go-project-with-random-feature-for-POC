// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

type TasksStatus string

const (
	TasksStatusTODO      TasksStatus = "TODO"
	TasksStatusCOMPLETED TasksStatus = "COMPLETED"
	TasksStatusPENDING   TasksStatus = "PENDING"
)

func (e *TasksStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TasksStatus(s)
	case string:
		*e = TasksStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TasksStatus: %T", src)
	}
	return nil
}

type NullTasksStatus struct {
	TasksStatus TasksStatus
	Valid       bool // Valid is true if TasksStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTasksStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TasksStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TasksStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTasksStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TasksStatus), nil
}

type DeadLetterTask struct {
	ID         int64
	TaskID     int64
	Payload    json.RawMessage
	ErrorMsg   string
	RetryCount sql.NullInt32
	CreatedAt  sql.NullTime
}

type Task struct {
	ID        int64
	Title     string
	Content   sql.NullString
	Status    TasksStatus
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	DeletedAt sql.NullTime
}
