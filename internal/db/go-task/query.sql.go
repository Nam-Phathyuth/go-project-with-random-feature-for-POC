// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const findTaskById = `-- name: FindTaskById :one
select id, title, content, status, created_at, updated_at, deleted_at from tasks where id = ?
`

func (q *Queries) FindTaskById(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, findTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllTask = `-- name: GetAllTask :many
select id, title, content, status, created_at, updated_at, deleted_at from tasks where deleted_at is null
`

func (q *Queries) GetAllTask(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTask)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTask = `-- name: SaveTask :execresult
INSERT INTO tasks (title, content, status) VALUES (?, ?, ?)
`

type SaveTaskParams struct {
	Title   string
	Content sql.NullString
	Status  TasksStatus
}

func (q *Queries) SaveTask(ctx context.Context, arg SaveTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, saveTask, arg.Title, arg.Content, arg.Status)
}
